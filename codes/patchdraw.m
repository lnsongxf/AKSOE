% PATCHDRAW.M
% =========================================================================
%
% USAGE:
%
% Shorthand notation:~ CM := complete markets; IM := incomplete markets.
%
% This script assumes that you have executed the following scripts
% successfully:~
%
% (1) ditr_close.m      : to get DITR and FBDITR cases for closed 
% (2) ditr_complete.m   : to get DITR and FBDITR cases for open CM
% (3) ditr.m            : to get DITR and FBDITR cases for open IM
% (4) mertr_complete.m  : to get MERTR and FBMERTR cases for open CM
% (5) mertr.m           : to get MERTR and FBMERTR cases for open IM
%
% Then this file loads the saved .MAT data generated by the scripts above
% and produces combined patch figures for regions of indeterminacy vs.
% stability of REE under alternative policy rules:
%
%       RULES := {DITR, FBDITR, MERTR, FBMERTR}
%
% Each rule has several case-economies as defined below.
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%======= OPTIONS: Please Check this Section First!  =======================

PCWIN = 0;  % Set == 1 if on a PC-Windows system (for directory "\" slash!)

SHOW_VERTICE_COORDINATES = 0; % Set == 1 
                              % if you want display key vertex coordinates
                              % which is given by "COMB" stored in each
                              % .MAT file
                              % Set == 0, otherwise

%==========================================================================


%==========================================================================
%     STRUCTURE OF RULES-ECONOMIES
%==========================================================================

% m = 1
DITR    = { 'Open CM economy with DITR', ...
            'Closed economy with DITR', ...
            'Open IM economy with DITR'                      };
% m = 2        
FBDITR  = { 'Open CM economy with FB-DITR', ... 
            'Closed economy with FB-DITR', ...
            'Open IM economy with FB-DITR'                   };
% m = 3        
CPITR   = { 'Open CM economy with CPITR', ...
            'Closed economy with CPITR', ...
            'Open IM economy with CPITR'                      };
% m = 4
FBCPITR = { 'Open CM economy with FB-CPITR', ... 
            'Closed economy with FB-CPITR', ...
            'Open IM economy with FB-CPITR'                   };
% m = 5                                                            
MERTR   = { 'Open CM economy with MERTR', ...
            'Open IM economy with MERTR'                     };
% m = 6       
FBMERTR = { 'Open CM economy with FB-MERTR', ...
            'Open IM economy with FB-MERTR'                  }; 
        
RULES = {DITR, FBDITR, CPITR, FBCPITR, MERTR, FBMERTR}; 

RULENAMES = { 'ditr', 'fbditr', 'cpitr', 'fbcpitr', 'mertr', 'fbmertr' };

%==========================================================================
%     GENERATE PATCH SURFACES
%==========================================================================

% RGB colors were chosen using a Digital Color Meter...
colortheme1 = [1  1  1];             % Percentage RGB: white
colortheme2 = { [.929  .929  .929], ...
                [.671  .671  .671], ...
                [.3    .3      .3]     };  % Percentage RGB: grayscale

% Specify common bounds on x- and y-axes in figures...
xmax = 4;
ymax = 4;

% Collect Patch diagrams for {DITR, FBDITR, MERTR, FBMERTR} ...

scrsz = get(0,'ScreenSize');

for m = 1:length(RULES)         % Loop over all families of policy rules
    
    
    figure('Name',RULENAMES{m},...% One figure for each m-th policy rule
           'Position',[1 scrsz(4) scrsz(3) scrsz(4)]) 
       
    % Axis labels and limits
    xlabel('\phi _{\pi}','FontSize',20);
    ylabel('\phi _{x}','FontSize',20);
    axis([0 xmax 0 ymax])
    
    rectangle('Position',[0,0,xmax,ymax],...
                        'FaceColor',colortheme1);
    
    for n = 1:length(RULES{m})  % Loop over all equilibria of economies
    
        if m == 1                       % DITR
            
            if n == 1
                load ditr_complete;
                stable = stable1;
            elseif n == 2
                load ditr_close;
                stable = stable1;
            elseif n == 3
                load ditr;
                stable = stable1;
            end
            
        elseif m == 2                   % FBDITR
            
            if n == 1
                load ditre_complete;
                stable = stable2;
            elseif n == 2
                load ditre_close;
                stable = stable2;    
            elseif n == 3
                load ditre;
                stable = stable2;   
            end
            
        elseif m == 3                   % CPITR
            
            if n == 1
                load cpitr_complete;
                stable = stable1;
            elseif n == 2
                load cpitr_close;      
                stable = stable1;    
            elseif n == 3
                load cpitr;
                stable = stable1;   
            end
            
        elseif m == 4                   % FBCPITR
            
            if n == 1
                load cpitre_complete;
                stable = stable2;
            elseif n == 2
                load cpitre;     
                stable = stable2;    
            elseif n == 3
                load cpitre_close;
                stable = stable2;   
            end
            
        elseif m == 5                   % MERTR
            
            if n == 1
                load mertr_complete;
                stable = stable1;
            elseif n == 2
                load mertr;    
                stable = stable1;    
            end
            
        elseif m == 6                   % FBMERTR
            
            if n == 1
                load mertre_complete;
                stable = stable2;
            elseif n == 2
                load mertre;     
                stable = stable2;     
            end
            
        end
        
        % Prepare convex hull approximation of finite data set
        x = stable(:,1);
        y = stable(:,2);
        k = convhull(x,y);
        
        hold on
           
            p1 = patch(x(k), y(k), colortheme2{n});
            alpha(0.5); % Set transparency of current patch object
            set(p1,'EdgeColor',colortheme2{n},'LineWidth',2)
            
            if m == 1 || m == 3 || m == 5
                if SHOW_VERTICE_COORDINATES == 1
                
%                     text(COMB(1,1), COMB(1,2),...
%                          strcat('(',num2str(COMB(1,1)),',',...
%                                                 num2str(COMB(1,2)),')'))
                      precision = '% 10.1f';
                      gctext = strcat(  '(',...
                                        num2str(COMB(1,1),precision),...
                                        ',',...
                                        num2str(COMB(1,2),precision),...
                                        ')'...
                                     );
                      curlabel(gctext, 9);
                end
            end
            
        hold off;


    end
    
       
    if SHOW_VERTICE_COORDINATES == 0
        if m == 1 || m == 2
           legend('CM', 'CD',  'IM') 
        elseif m == 3 || m == 4
           legend('CM', 'IM', 'CD')
        elseif m == 5 || m == 6
           legend('CM', 'IM')  
        end
    end
    
    if PCWIN == 1
        filename = strcat('_figures\',RULENAMES{m});
    else
        filename = strcat('_figures/',RULENAMES{m});
    end
    
    print('-deps', filename)           % Black & White .EPS figure
    hgsave(filename)                    % MATLAB .FIG
   
end